name: Generate Issue Report on Close
on:
  issues:
    types: [closed]  # Se ejecutará cuando un issue sea cerrado
permissions:
  contents: write
jobs:
  generate-md-file:
    name: Test
    runs-on: ubuntu-latest
    if: contains(join(github.event.issue.labels.*.name, ','), 'report') && contains(join(github.event.issue.labels.*.name, ','), 'approved report')    
    steps:
      - name: Get user permissions
        id: check-permissions
        run: |
          curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
               -H "Accept: application/vnd.github.v3+json" \
               "https://api.github.com/repos/${{ github.repository }}/collaborators/${{ github.actor }}/permission" > permissions.json

          permission=$(jq -r '.permission' permissions.json)

          if [[ "$permission" != "admin" && "$permission" != "write" ]]; then
            echo "Actor does not have sufficient permissions: $permission"
            exit 1
          fi

          echo "Actor has sufficient permissions: $permission"
      - uses: actions/checkout@v4
      - run: |
          echo A comment on issue $NUMBER
        env:
          NUMBER: ${{ github.event.issue.number }}
      - run: |
          echo A comment on body $input
        env:
          BODY: ${{ github.event.issue.body }}
          input: $BODY
      - run: |
          BODY="${{ github.event.issue.body }}"
          tags=("### Steamvr" "### Monado" "### ALVR" "### WIVRN" "### GPU vendor" "### Distribution" "### Headset" "### Description" "### Date")
          keys=("steamVR" "monado" "alvr" "wivrn" "GPUVendor" "distro" "device" "text" "date")
          
          declare -A value_map=(
              ["Perfect"]=1
              ["Requires manual configuration"]=2
              ["Playable with graphical/controller issues"]=3
              ["Unplayable because of graphical/controller issues"]=4
              ["Crashes or won't start"]=5
              ["None"]=0
          )
          
          function filter_tags() {
              local tag="$1"
              local key="$2"
          
              # Filtrar el contenido y asignarlo a una variable
              content_filtered=$(echo "$BODY" | sed -n "/$tag/,/^###/{ /^###/d; p }")
              
              # Eliminar saltos de línea al principio y al final
              content_filtered=$(echo "$content_filtered" | sed ':a; /^\s*$/d; N; s/^\n*//; s/\n*$//; ta')
              
              # Si no hay contenido, establecer "None"
              content_filtered=${content_filtered:-None}
          
              # Aplicar el mapeo solo a las claves relevantes
              if [[ "$key" =~ ^(steamVR|monado|alvr|wivrn)$ ]]; then
                  if [[ ${value_map[$content_filtered]+_} ]]; then
                      content_filtered="${value_map[$content_filtered]}"
                  else
                      content_filtered=0
                  fi
              fi
          
              # Si es la clave 'text', aplicar sangría adicional a las líneas adicionales
              if [[ "$key" == "text" ]]; then
                  # Imprimir la clave con el operador `|`
                  echo "      $key: |"
              
                  # Agregar el contenido sangrado
                  echo "$content_filtered" | sed 's/^/          /'
              fi
              
          
              # Si es la primera línea (guion), agregarla al inicio
              if [[ "$key" == "${keys[0]}" ]]; then
                  echo "    - $key: $content_filtered"
              elif [[ "$key" != "text" ]]; then
                  echo "      $key: $content_filtered"
              fi
          }
          
          # Inicializar el bloque completo
          output=""
          
          # Construir las líneas formateadas para cada etiqueta
          for i in "${!tags[@]}"; do
              line=$(filter_tags "${tags[$i]}" "${keys[$i]}")
              output+=$'\n'"$line"
          done
          
          # Ruta al archivo (ajustada con github.action_path)
          file="${{ github.action_path }}src/games/${{ github.event.issue.title }}.md"
          
          # Eliminar la última línea del archivo (opcional según lo que necesites)
          sed -i '$ d' "$file"
          
          # Añadir el bloque completo al archivo
          echo -e "$output" >> "$file"
          
          # Añadir un separador (opcional)
          echo -e "---" >> "$file"
          
          # Imprimir el archivo para confirmar los cambios
          cat "$file"








          
          # Configurar Git en GitHub Actions
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
          # Añadir el archivo modificado al repositorio
          git add "$file"
          
          # Realizar un commit con un mensaje descriptivo
          git commit -m "Update superhot-vr.md with filtered content from issue"
          
          # Configurar el repositorio remoto para usar GITHUB_TOKEN
          repo_url="https://x-access-token:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git"
          git remote set-url origin "$repo_url"
          
          # Subir los cambios al repositorio
          git push origin HEAD:${{ github.ref_name }}

        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
